import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata = {
  title: "Demo Project - Tree Structure",
  description: "Generated by create next app",
};

import { NodesEdgesProvider } from "./service/nodesEdgesContext";

// system of id of initial nodes is - "level-parent-numberOfChild"
//  like id = "1-1-2"
//  1 = level of flow chart
//  1 = no in parent's level "matlab ye child, jis parent ka h uska uske level me konsi position h "
//  2 = position on his level
const initialNodes = [
  {
    id: "0",
    data: { label: "M0124", isActive: true , childCount: 0 , isVisible: true},
    position: { x: 100, y: 100 },
    type: "rootNodeType",
    draggable: false,
  },
  // {
  //   id: "1-0-1",
  //   data: { label: "S222", isActive: true , childCount: 0 , isVisible: true},
  //   position: { x: 400, y: 200 },
  //   type: "branchNodeType",
  //   draggable: false,
  // },
  // {
  //   id: "1-0-2",
  //   data: { label: "S223", isActive: true , childCount: 0 , isVisible: true},
  //   position: { x: 400, y: 200 },
  //   type: "branchNodeType",
  //   draggable: false,
  // },
  // {
  //   id: "2-1-1",
  //   data: { label: "S323", isActive: true , childCount: 0 , isVisible: true},
  //   position: { x: 400, y: 200 },
  //   type: "branchNodeType",
  //   draggable: false,
  // },
  // {
  //   id: "2-1-2",
  //   data: { label: "S333", isActive: false , childCount: 0 , isVisible: true},
  //   position: { x: 400, y: 200 },
  //   type: "leafNodeType",
  //   draggable: false,
  // },
  // {
  //   id: "2-2-3",
  //   data: { label: "S323", isActive: true , childCount: 0 , isVisible: true},
  //   position: { x: 400, y: 200 },
  //   type: "leafNodeType",
  //   draggable: false,
  // },
  // {
  //   id: "2-2-4",
  //   data: { label: "S333", isActive: true , childCount: 0 , isVisible: true},
  //   position: { x: 400, y: 200 },
  //   type: "leafNodeType",
  //   draggable: false,
  // },
  // {
  //   id: "3-1-1",
  //   data: { label: "S333", isActive: false , childCount: 0 , isVisible: true},
  //   position: { x: 400, y: 200 },
  //   type: "leafNodeType",
  //   draggable: false,
  // },
  // {
  //   id: "3-1-2",
  //   data: { label: "S333", isActive: false , childCount: 0 , isVisible: true},
  //   position: { x: 400, y: 200 },
  //   type: "leafNodeType",
  //   draggable: false,
  // },
  // {
  //   id: "3-1-3",
  //   data: { label: "S336", isActive: true , childCount: 0 , isVisible: true},
  //   position: { x: 400, y: 200 },
  //   type: "leafNodeType",
  //   draggable: false,
  // },
  // {
  //   id: "3-1-4",
  //   data: { label: "S338", isActive: false , childCount: 0 , isVisible: true},
  //   position: { x: 400, y: 200 },
  //   type: "leafNodeType",
  //   draggable: false,
  // },
];

const initialEdges = [
  // { id: "0_1-0-1", source: "0", target: "1-0-1", animated: true , hidden: false },
  // { id: "0_1-0-2", source: "0", target: "1-0-2", animated: true , hidden: false },
  // { id: "1-0-1_2-1-1", source: "1-0-1", target: "2-1-1", animated: true , hidden: false },
  // { id: "1-0-1_2-1-2", source: "1-0-1", target: "2-1-2", animated: true , hidden: false },
  // { id: "1-0-2_2-2-3", source: "1-0-2", target: "2-2-3", animated: true , hidden: false },
  // { id: "1-0-2_2-2-4", source: "1-0-2", target: "2-2-4", animated: true , hidden: false },
  // { id: "2-1-1_3-1-1", source: "2-1-1", target: "3-1-1", animated: true , hidden: false },
  // { id: "2-1-1_3-1-2", source: "2-1-1", target: "3-1-2", animated: true , hidden: false },
  // { id: "2-1-1_3-1-3", source: "2-1-1", target: "3-1-3", animated: true , hidden: false },
  // { id: "2-1-1_3-1-4", source: "2-1-1", target: "3-1-4", animated: true , hidden: false },
];

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <NodesEdgesProvider
          initialNodes={initialNodes}
          initialEdges={initialEdges}
        >
          {children}
        </NodesEdgesProvider>
      </body>
    </html>
  );
}
